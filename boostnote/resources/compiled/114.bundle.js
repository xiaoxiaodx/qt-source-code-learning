(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{"./node_modules/codemirror/mode/xquery/xquery.js":function(e,t,n){!function(e){"use strict";e.defineMode("xquery",(function(){var e=function(){function e(e){return{type:e,style:"keyword"}}for(var t=e("operator"),n={type:"atom",style:"atom"},r={type:"axis_specifier",style:"qualifier"},i={",":{type:"punctuation",style:null}},a=["after","all","allowing","ancestor","ancestor-or-self","any","array","as","ascending","at","attribute","base-uri","before","boundary-space","by","case","cast","castable","catch","child","collation","comment","construction","contains","content","context","copy","copy-namespaces","count","decimal-format","declare","default","delete","descendant","descendant-or-self","descending","diacritics","different","distance","document","document-node","element","else","empty","empty-sequence","encoding","end","entire","every","exactly","except","external","first","following","following-sibling","for","from","ftand","ftnot","ft-option","ftor","function","fuzzy","greatest","group","if","import","in","inherit","insensitive","insert","instance","intersect","into","invoke","is","item","language","last","lax","least","let","levels","lowercase","map","modify","module","most","namespace","next","no","node","nodes","no-inherit","no-preserve","not","occurs","of","only","option","order","ordered","ordering","paragraph","paragraphs","parent","phrase","preceding","preceding-sibling","preserve","previous","processing-instruction","relationship","rename","replace","return","revalidation","same","satisfies","schema","schema-attribute","schema-element","score","self","sensitive","sentence","sentences","sequence","skip","sliding","some","stable","start","stemming","stop","strict","strip","switch","text","then","thesaurus","times","to","transform","treat","try","tumbling","type","typeswitch","union","unordered","update","updating","uppercase","using","validate","value","variable","version","weight","when","where","wildcards","window","with","without","word","words","xquery"],o=0,s=a.length;o<s;o++)i[a[o]]=e(a[o]);var c=["xs:anyAtomicType","xs:anySimpleType","xs:anyType","xs:anyURI","xs:base64Binary","xs:boolean","xs:byte","xs:date","xs:dateTime","xs:dateTimeStamp","xs:dayTimeDuration","xs:decimal","xs:double","xs:duration","xs:ENTITIES","xs:ENTITY","xs:float","xs:gDay","xs:gMonth","xs:gMonthDay","xs:gYear","xs:gYearMonth","xs:hexBinary","xs:ID","xs:IDREF","xs:IDREFS","xs:int","xs:integer","xs:item","xs:java","xs:language","xs:long","xs:Name","xs:NCName","xs:negativeInteger","xs:NMTOKEN","xs:NMTOKENS","xs:nonNegativeInteger","xs:nonPositiveInteger","xs:normalizedString","xs:NOTATION","xs:numeric","xs:positiveInteger","xs:precisionDecimal","xs:QName","xs:short","xs:string","xs:time","xs:token","xs:unsignedByte","xs:unsignedInt","xs:unsignedLong","xs:unsignedShort","xs:untyped","xs:untypedAtomic","xs:yearMonthDuration"];for(o=0,s=c.length;o<s;o++)i[c[o]]=n;var u=["eq","ne","lt","le","gt","ge",":=","=",">",">=","<","<=",".","|","?","and","or","div","idiv","mod","*","/","+","-"];for(o=0,s=u.length;o<s;o++)i[u[o]]=t;var l=["self::","attribute::","child::","descendant::","descendant-or-self::","parent::","ancestor::","ancestor-or-self::","following::","preceding::","following-sibling::","preceding-sibling::"];for(o=0,s=l.length;o<s;o++)i[l[o]]=r;return i}();function t(e,t,n){return t.tokenize=n,n(e,t)}function n(d,p){var x=d.next(),g=!1,y=function(e){return'"'===e.current()?e.match(/^[^\"]+\"\:/,!1):"'"===e.current()&&e.match(/^[^\"]+\'\:/,!1)}(d);if("<"==x){if(d.match("!--",!0))return t(d,p,s);if(d.match("![CDATA",!1))return p.tokenize=c,"tag";if(d.match("?",!1))return t(d,p,u);var h=d.eat("/");d.eatSpace();for(var k,b="";k=d.eat(/[^\s\u00a0=<>\"\'\/?]/);)b+=k;return t(d,p,function(e,t){return function(r,i){return r.eatSpace(),t&&r.eat(">")?(m(i),i.tokenize=n,"tag"):(r.eat("/")||f(i,{type:"tag",name:e,tokenize:n}),r.eat(">")?(i.tokenize=n,"tag"):(i.tokenize=o,"tag"))}}(b,h))}if("{"==x)return f(p,{type:"codeblock"}),null;if("}"==x)return m(p),null;if(isInXmlBlock(p))return">"==x?"tag":"/"==x&&d.eat(">")?(m(p),"tag"):"variable";if(/\d/.test(x))return d.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/),"atom";if("("===x&&d.eat(":"))return f(p,{type:"comment"}),t(d,p,r);if(y||'"'!==x&&"'"!==x){if("$"===x)return t(d,p,a);if(":"===x&&d.eat("="))return"keyword";if("("===x)return f(p,{type:"paren"}),null;if(")"===x)return m(p),null;if("["===x)return f(p,{type:"bracket"}),null;if("]"===x)return m(p),null;var v=e.propertyIsEnumerable(x)&&e[x];if(y&&'"'===x)for(;'"'!==d.next(););if(y&&"'"===x)for(;"'"!==d.next(););v||d.eatWhile(/[\w\$_-]/);var w=d.eat(":");!d.eat(":")&&w&&d.eatWhile(/[\w\$_-]/),d.match(/^[ \t]*\(/,!1)&&(g=!0);var z=d.current();return v=e.propertyIsEnumerable(z)&&e[z],g&&!v&&(v={type:"function_call",style:"variable def"}),function(e){return l(e,"xmlconstructor")}(p)?(m(p),"variable"):("element"!=z&&"attribute"!=z&&"axis_specifier"!=v.type||f(p,{type:"xmlconstructor"}),v?v.style:"variable")}return t(d,p,i(x))}function r(e,t){for(var n,r=!1,i=!1,a=0;n=e.next();){if(")"==n&&r){if(!(a>0)){m(t);break}a--}else":"==n&&i&&a++;r=":"==n,i="("==n}return"comment"}function i(e,t){return function(r,a){var o;if(function(e){return l(e,"string")}(a)&&r.current()==e)return m(a),t&&(a.tokenize=t),"string";if(f(a,{type:"string",name:e,tokenize:i(e,t)}),r.match("{",!1)&&isInXmlAttributeBlock(a))return a.tokenize=n,"string";for(;o=r.next();){if(o==e){m(a),t&&(a.tokenize=t);break}if(r.match("{",!1)&&isInXmlAttributeBlock(a))return a.tokenize=n,"string"}return"string"}}function a(e,t){var r=/[\w\$_-]/;if(e.eat('"')){for(;'"'!==e.next(););e.eat(":")}else e.eatWhile(r),e.match(":=",!1)||e.eat(":");return e.eatWhile(r),t.tokenize=n,"variable"}function o(e,r){var a=e.next();return"/"==a&&e.eat(">")?(isInXmlAttributeBlock(r)&&m(r),isInXmlBlock(r)&&m(r),"tag"):">"==a?(isInXmlAttributeBlock(r)&&m(r),"tag"):"="==a?null:'"'==a||"'"==a?t(e,r,i(a,o)):(isInXmlAttributeBlock(r)||f(r,{type:"attribute",tokenize:o}),e.eat(/[a-zA-Z_:]/),e.eatWhile(/[-a-zA-Z0-9_:.]/),e.eatSpace(),(e.match(">",!1)||e.match("/",!1))&&(m(r),r.tokenize=n),"attribute")}function s(e,t){for(var r;r=e.next();)if("-"==r&&e.match("->",!0))return t.tokenize=n,"comment"}function c(e,t){for(var r;r=e.next();)if("]"==r&&e.match("]",!0))return t.tokenize=n,"comment"}function u(e,t){for(var r;r=e.next();)if("?"==r&&e.match(">",!0))return t.tokenize=n,"comment meta"}function isInXmlBlock(e){return l(e,"tag")}function isInXmlAttributeBlock(e){return l(e,"attribute")}function l(e,t){return e.stack.length&&e.stack[e.stack.length-1].type==t}function f(e,t){e.stack.push(t)}function m(e){e.stack.pop();var t=e.stack.length&&e.stack[e.stack.length-1].tokenize;e.tokenize=t||n}return{startState:function(){return{tokenize:n,cc:[],stack:[]}},token:function(e,t){return e.eatSpace()?null:t.tokenize(e,t)},blockCommentStart:"(:",blockCommentEnd:":)"}})),e.defineMIME("application/xquery","xquery")}(n("./node_modules/codemirror/lib/codemirror.js"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,