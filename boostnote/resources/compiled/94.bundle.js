(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{"./node_modules/codemirror/mode/sparql/sparql.js":function(t,e,n){!function(t){"use strict";t.defineMode("sparql",(function(t){var e,n=t.indentUnit;function r(t){return new RegExp("^(?:"+t.join("|")+")$","i")}var o=r(["str","lang","langmatches","datatype","bound","sameterm","isiri","isuri","iri","uri","bnode","count","sum","min","max","avg","sample","group_concat","rand","abs","ceil","floor","round","concat","substr","strlen","replace","ucase","lcase","encode_for_uri","contains","strstarts","strends","strbefore","strafter","year","month","day","hours","minutes","seconds","timezone","tz","now","uuid","struuid","md5","sha1","sha256","sha384","sha512","coalesce","if","strlang","strdt","isnumeric","regex","exists","isblank","isliteral","a","bind"]),i=r(["base","prefix","select","distinct","reduced","construct","describe","ask","from","named","where","order","limit","offset","filter","optional","graph","by","asc","desc","as","having","undef","values","group","minus","in","not","service","silent","using","insert","delete","union","true","false","with","data","copy","to","move","add","create","drop","clear","load"]),u=/[*+\-<>=&|\^\/!\?]/;function a(t,n){var r=t.next();if(e=null,"$"==r||"?"==r)return"?"==r&&t.match(/\s/,!1)?"operator":(t.match(/^[A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][A-Za-z0-9_\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]*/),"variable-2");if("<"!=r||t.match(/^[\s\u00a0=]/,!1)){if('"'==r||"'"==r)return n.tokenize=function tokenLiteral(t){return function(e,n){for(var r,o=!1;null!=(r=e.next());){if(r==t&&!o){n.tokenize=a;break}o=!o&&"\\"==r}return"string"}}(r),n.tokenize(t,n);if(/[{}\(\),\.;\[\]]/.test(r))return e=r,"bracket";if("#"==r)return t.skipToEnd(),"comment";if(u.test(r))return t.eatWhile(u),"operator";if(":"==r)return t.eatWhile(/[\w\d\._\-]/),"atom";if("@"==r)return t.eatWhile(/[a-z\d\-]/i),"meta";if(t.eatWhile(/[_\w\d]/),t.eat(":"))return t.eatWhile(/[\w\d_\-]/),"atom";var c=t.current();return o.test(c)?"builtin":i.test(c)?"keyword":"variable"}return t.match(/^[^\s\u00a0>]*>?/),"atom"}function c(t,e,n){t.context={prev:t.context,indent:t.indent,col:n,type:e}}function s(t){t.indent=t.context.indent,t.context=t.context.prev}return{startState:function(){return{tokenize:a,context:null,indent:0,col:0}},token:function(t,n){if(t.sol()&&(n.context&&null==n.context.align&&(n.context.align=!1),n.indent=t.indentation()),t.eatSpace())return null;var r=n.tokenize(t,n);if("comment"!=r&&n.context&&null==n.context.align&&"pattern"!=n.context.type&&(n.context.align=!0),"("==e)c(n,")",t.column());else if("["==e)c(n,"]",t.column());else if("{"==e)c(n,"}",t.column());else if(/[\]\}\)]/.test(e)){for(;n.context&&"pattern"==n.context.type;)s(n);n.context&&e==n.context.type&&(s(n),"}"==e&&n.context&&"pattern"==n.context.type&&s(n))}else"."==e&&n.context&&"pattern"==n.context.type?s(n):/atom|string|variable/.test(r)&&n.context&&(/[\}\]]/.test(n.context.type)?c(n,"pattern",t.column()):"pattern"!=n.context.type||n.context.align||(n.context.align=!0,n.context.col=t.column()));return r},indent:function(t,e){var r=e&&e.charAt(0),o=t.context;if(/[\]\}]/.test(r))for(;o&&"pattern"==o.type;)o=o.prev;var i=o&&r==o.type;return o?"pattern"==o.type?o.col:o.align?o.col+(i?0:1):o.indent+(i?0:n):0},lineComment:"#"}})),t.defineMIME("application/sparql-query","sparql")}(n("./node_modules/codemirror/lib/codemirror.js"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL3NwYXJxbC9zcGFycWwuanMiXSwibmFtZXMiOlsiQ29kZU1pcnJvciIsImRlZmluZU1vZGUiLCJjb25maWciLCJjdXJQdW5jIiwiaW5kZW50VW5pdCIsIndvcmRSZWdleHAiLCJ3b3JkcyIsIlJlZ0V4cCIsImpvaW4iLCJvcHMiLCJrZXl3b3JkcyIsIm9wZXJhdG9yQ2hhcnMiLCJ0b2tlbkJhc2UiLCJzdHJlYW0iLCJzdGF0ZSIsImNoIiwibmV4dCIsIm1hdGNoIiwidG9rZW5pemUiLCJ0b2tlbkxpdGVyYWwiLCJxdW90ZSIsImVzY2FwZWQiLCJ0ZXN0Iiwic2tpcFRvRW5kIiwiZWF0V2hpbGUiLCJlYXQiLCJ3b3JkIiwiY3VycmVudCIsInB1c2hDb250ZXh0IiwidHlwZSIsImNvbCIsImNvbnRleHQiLCJwcmV2IiwiaW5kZW50IiwicG9wQ29udGV4dCIsInN0YXJ0U3RhdGUiLCJ0b2tlbiIsInNvbCIsImFsaWduIiwiaW5kZW50YXRpb24iLCJlYXRTcGFjZSIsInN0eWxlIiwiY29sdW1uIiwidGV4dEFmdGVyIiwiZmlyc3RDaGFyIiwiY2hhckF0IiwiY2xvc2luZyIsImxpbmVDb21tZW50IiwiZGVmaW5lTUlNRSIsIm1vZCJdLCJtYXBwaW5ncyI6IjZIQVVHLFNBQVNBLEdBQ1osYUFFQUEsRUFBV0MsV0FBVyxVQUFVLFNBQVNDLEdBQ3ZDLElBQ0lDLEVBREFDLEVBQWFGLEVBQU9FLFdBR3hCLFNBQVNDLEVBQVdDLEdBQ2xCLE9BQU8sSUFBSUMsT0FBTyxPQUFTRCxFQUFNRSxLQUFLLEtBQU8sS0FBTSxLQUVyRCxJQUFJQyxFQUFNSixFQUFXLENBQUMsTUFBTyxPQUFRLGNBQWUsV0FBWSxRQUFTLFdBQVksUUFBUyxRQUN4RSxNQUFPLE1BQU8sUUFBUyxRQUFTLE1BQU8sTUFBTyxNQUFPLE1BQU8sU0FDNUQsZUFBZ0IsT0FBUSxNQUFPLE9BQVEsUUFBUyxRQUFTLFNBQVUsU0FBVSxT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VUEsRUFBUUMsS0FFakUsSUFBSWMsRUFBVWYsR0FBV2EsR0FBYWIsRUFBUUYsS0FDOUMsT0FBS0UsRUFFb0IsV0FBaEJBLEVBQVFGLEtBQ1JFLEVBQVFELElBQ1JDLEVBQVFPLE1BQ1JQLEVBQVFELEtBQU9nQixFQUFVLEVBQUksR0FFN0JmLEVBQVFFLFFBQVVhLEVBQVUsRUFBSTFDLEdBTmhDLEdBU1gyQyxZQUFhLFFBSWpCL0MsRUFBV2dELFdBQVcsMkJBQTRCLFVBNUs5Q0MsQ0FBSSxFQUFRIiwiZmlsZSI6Ijk0LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIG1vZChyZXF1aXJlKFwiLi4vLi4vbGliL2NvZGVtaXJyb3JcIikpO1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICBkZWZpbmUoW1wiLi4vLi4vbGliL2NvZGVtaXJyb3JcIl0sIG1vZCk7XG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcik7XG59KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuQ29kZU1pcnJvci5kZWZpbmVNb2RlKFwic3BhcnFsXCIsIGZ1bmN0aW9uKGNvbmZpZykge1xuICB2YXIgaW5kZW50VW5pdCA9IGNvbmZpZy5pbmRlbnRVbml0O1xuICB2YXIgY3VyUHVuYztcblxuICBmdW5jdGlvbiB3b3JkUmVnZXhwKHdvcmRzKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyB3b3Jkcy5qb2luKFwifFwiKSArIFwiKSRcIiwgXCJpXCIpO1xuICB9XG4gIHZhciBvcHMgPSB3b3JkUmVnZXhwKFtcInN0clwiLCBcImxhbmdcIiwgXCJsYW5nbWF0Y2hlc1wiLCBcImRhdGF0eXBlXCIsIFwiYm91bmRcIiwgXCJzYW1ldGVybVwiLCBcImlzaXJpXCIsIFwiaXN1cmlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaXJpXCIsIFwidXJpXCIsIFwiYm5vZGVcIiwgXCJjb3VudFwiLCBcInN1bVwiLCBcIm1pblwiLCBcIm1heFwiLCBcImF2Z1wiLCBcInNhbXBsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJncm91cF9jb25jYXRcIiwgXCJyYW5kXCIsIFwiYWJzXCIsIFwiY2VpbFwiLCBcImZsb29yXCIsIFwicm91bmRcIiwgXCJjb25jYXRcIiwgXCJzdWJzdHJcIiwgXCJzdHJsZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmVwbGFjZVwiLCBcInVjYXNlXCIsIFwibGNhc2VcIiwgXCJlbmNvZGVfZm9yX3VyaVwiLCBcImNvbnRhaW5zXCIsIFwic3Ryc3RhcnRzXCIsIFwic3RyZW5kc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJiZWZvcmVcIiwgXCJzdHJhZnRlclwiLCBcInllYXJcIiwgXCJtb250aFwiLCBcImRheVwiLCBcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGltZXpvbmVcIiwgXCJ0elwiLCBcIm5vd1wiLCBcInV1aWRcIiwgXCJzdHJ1dWlkXCIsIFwibWQ1XCIsIFwic2hhMVwiLCBcInNoYTI1NlwiLCBcInNoYTM4NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzaGE1MTJcIiwgXCJjb2FsZXNjZVwiLCBcImlmXCIsIFwic3RybGFuZ1wiLCBcInN0cmR0XCIsIFwiaXNudW1lcmljXCIsIFwicmVnZXhcIiwgXCJleGlzdHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaXNibGFua1wiLCBcImlzbGl0ZXJhbFwiLCBcImFcIiwgXCJiaW5kXCJdKTtcbiAgdmFyIGtleXdvcmRzID0gd29yZFJlZ2V4cChbXCJiYXNlXCIsIFwicHJlZml4XCIsIFwic2VsZWN0XCIsIFwiZGlzdGluY3RcIiwgXCJyZWR1Y2VkXCIsIFwiY29uc3RydWN0XCIsIFwiZGVzY3JpYmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhc2tcIiwgXCJmcm9tXCIsIFwibmFtZWRcIiwgXCJ3aGVyZVwiLCBcIm9yZGVyXCIsIFwibGltaXRcIiwgXCJvZmZzZXRcIiwgXCJmaWx0ZXJcIiwgXCJvcHRpb25hbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdyYXBoXCIsIFwiYnlcIiwgXCJhc2NcIiwgXCJkZXNjXCIsIFwiYXNcIiwgXCJoYXZpbmdcIiwgXCJ1bmRlZlwiLCBcInZhbHVlc1wiLCBcImdyb3VwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWludXNcIiwgXCJpblwiLCBcIm5vdFwiLCBcInNlcnZpY2VcIiwgXCJzaWxlbnRcIiwgXCJ1c2luZ1wiLCBcImluc2VydFwiLCBcImRlbGV0ZVwiLCBcInVuaW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidHJ1ZVwiLCBcImZhbHNlXCIsIFwid2l0aFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRhdGFcIiwgXCJjb3B5XCIsIFwidG9cIiwgXCJtb3ZlXCIsIFwiYWRkXCIsIFwiY3JlYXRlXCIsIFwiZHJvcFwiLCBcImNsZWFyXCIsIFwibG9hZFwiXSk7XG4gIHZhciBvcGVyYXRvckNoYXJzID0gL1sqK1xcLTw+PSZ8XFxeXFwvIVxcP10vO1xuXG4gIGZ1bmN0aW9uIHRva2VuQmFzZShzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcbiAgICBjdXJQdW5jID0gbnVsbDtcbiAgICBpZiAoY2ggPT0gXCIkXCIgfHwgY2ggPT0gXCI/XCIpIHtcbiAgICAgIGlmKGNoID09IFwiP1wiICYmIHN0cmVhbS5tYXRjaCgvXFxzLywgZmFsc2UpKXtcbiAgICAgICAgcmV0dXJuIFwib3BlcmF0b3JcIjtcbiAgICAgIH1cbiAgICAgIHN0cmVhbS5tYXRjaCgvXltBLVphLXowLTlfXFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVtBLVphLXowLTlfXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF0qLyk7XG4gICAgICByZXR1cm4gXCJ2YXJpYWJsZS0yXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoID09IFwiPFwiICYmICFzdHJlYW0ubWF0Y2goL15bXFxzXFx1MDBhMD1dLywgZmFsc2UpKSB7XG4gICAgICBzdHJlYW0ubWF0Y2goL15bXlxcc1xcdTAwYTA+XSo+Py8pO1xuICAgICAgcmV0dXJuIFwiYXRvbVwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaCA9PSBcIlxcXCJcIiB8fCBjaCA9PSBcIidcIikge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkxpdGVyYWwoY2gpO1xuICAgICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICgvW3t9XFwoXFwpLFxcLjtcXFtcXF1dLy50ZXN0KGNoKSkge1xuICAgICAgY3VyUHVuYyA9IGNoO1xuICAgICAgcmV0dXJuIFwiYnJhY2tldFwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaCA9PSBcIiNcIikge1xuICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChvcGVyYXRvckNoYXJzLnRlc3QoY2gpKSB7XG4gICAgICBzdHJlYW0uZWF0V2hpbGUob3BlcmF0b3JDaGFycyk7XG4gICAgICByZXR1cm4gXCJvcGVyYXRvclwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaCA9PSBcIjpcIikge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFxkXFwuX1xcLV0vKTtcbiAgICAgIHJldHVybiBcImF0b21cIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2ggPT0gXCJAXCIpIHtcbiAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW2EtelxcZFxcLV0vaSk7XG4gICAgICByZXR1cm4gXCJtZXRhXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bX1xcd1xcZF0vKTtcbiAgICAgIGlmIChzdHJlYW0uZWF0KFwiOlwiKSkge1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXGRfXFwtXS8pO1xuICAgICAgICByZXR1cm4gXCJhdG9tXCI7XG4gICAgICB9XG4gICAgICB2YXIgd29yZCA9IHN0cmVhbS5jdXJyZW50KCk7XG4gICAgICBpZiAob3BzLnRlc3Qod29yZCkpXG4gICAgICAgIHJldHVybiBcImJ1aWx0aW5cIjtcbiAgICAgIGVsc2UgaWYgKGtleXdvcmRzLnRlc3Qod29yZCkpXG4gICAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIFwidmFyaWFibGVcIjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2tlbkxpdGVyYWwocXVvdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgdmFyIGVzY2FwZWQgPSBmYWxzZSwgY2g7XG4gICAgICB3aGlsZSAoKGNoID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAoY2ggPT0gcXVvdGUgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlc2NhcGVkID0gIWVzY2FwZWQgJiYgY2ggPT0gXCJcXFxcXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaENvbnRleHQoc3RhdGUsIHR5cGUsIGNvbCkge1xuICAgIHN0YXRlLmNvbnRleHQgPSB7cHJldjogc3RhdGUuY29udGV4dCwgaW5kZW50OiBzdGF0ZS5pbmRlbnQsIGNvbDogY29sLCB0eXBlOiB0eXBlfTtcbiAgfVxuICBmdW5jdGlvbiBwb3BDb250ZXh0KHN0YXRlKSB7XG4gICAgc3RhdGUuaW5kZW50ID0gc3RhdGUuY29udGV4dC5pbmRlbnQ7XG4gICAgc3RhdGUuY29udGV4dCA9IHN0YXRlLmNvbnRleHQucHJldjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge3Rva2VuaXplOiB0b2tlbkJhc2UsXG4gICAgICAgICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgICAgICAgIGluZGVudDogMCxcbiAgICAgICAgICAgICAgY29sOiAwfTtcbiAgICB9LFxuXG4gICAgdG9rZW46IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIGlmIChzdHJlYW0uc29sKCkpIHtcbiAgICAgICAgaWYgKHN0YXRlLmNvbnRleHQgJiYgc3RhdGUuY29udGV4dC5hbGlnbiA9PSBudWxsKSBzdGF0ZS5jb250ZXh0LmFsaWduID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmluZGVudCA9IHN0cmVhbS5pbmRlbnRhdGlvbigpO1xuICAgICAgfVxuICAgICAgaWYgKHN0cmVhbS5lYXRTcGFjZSgpKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBzdHlsZSA9IHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuXG4gICAgICBpZiAoc3R5bGUgIT0gXCJjb21tZW50XCIgJiYgc3RhdGUuY29udGV4dCAmJiBzdGF0ZS5jb250ZXh0LmFsaWduID09IG51bGwgJiYgc3RhdGUuY29udGV4dC50eXBlICE9IFwicGF0dGVyblwiKSB7XG4gICAgICAgIHN0YXRlLmNvbnRleHQuYWxpZ24gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VyUHVuYyA9PSBcIihcIikgcHVzaENvbnRleHQoc3RhdGUsIFwiKVwiLCBzdHJlYW0uY29sdW1uKCkpO1xuICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBcIltcIikgcHVzaENvbnRleHQoc3RhdGUsIFwiXVwiLCBzdHJlYW0uY29sdW1uKCkpO1xuICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBcIntcIikgcHVzaENvbnRleHQoc3RhdGUsIFwifVwiLCBzdHJlYW0uY29sdW1uKCkpO1xuICAgICAgZWxzZSBpZiAoL1tcXF1cXH1cXCldLy50ZXN0KGN1clB1bmMpKSB7XG4gICAgICAgIHdoaWxlIChzdGF0ZS5jb250ZXh0ICYmIHN0YXRlLmNvbnRleHQudHlwZSA9PSBcInBhdHRlcm5cIikgcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICAgIGlmIChzdGF0ZS5jb250ZXh0ICYmIGN1clB1bmMgPT0gc3RhdGUuY29udGV4dC50eXBlKSB7XG4gICAgICAgICAgcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICAgICAgaWYgKGN1clB1bmMgPT0gXCJ9XCIgJiYgc3RhdGUuY29udGV4dCAmJiBzdGF0ZS5jb250ZXh0LnR5cGUgPT0gXCJwYXR0ZXJuXCIpXG4gICAgICAgICAgICBwb3BDb250ZXh0KHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBcIi5cIiAmJiBzdGF0ZS5jb250ZXh0ICYmIHN0YXRlLmNvbnRleHQudHlwZSA9PSBcInBhdHRlcm5cIikgcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICBlbHNlIGlmICgvYXRvbXxzdHJpbmd8dmFyaWFibGUvLnRlc3Qoc3R5bGUpICYmIHN0YXRlLmNvbnRleHQpIHtcbiAgICAgICAgaWYgKC9bXFx9XFxdXS8udGVzdChzdGF0ZS5jb250ZXh0LnR5cGUpKVxuICAgICAgICAgIHB1c2hDb250ZXh0KHN0YXRlLCBcInBhdHRlcm5cIiwgc3RyZWFtLmNvbHVtbigpKTtcbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuY29udGV4dC50eXBlID09IFwicGF0dGVyblwiICYmICFzdGF0ZS5jb250ZXh0LmFsaWduKSB7XG4gICAgICAgICAgc3RhdGUuY29udGV4dC5hbGlnbiA9IHRydWU7XG4gICAgICAgICAgc3RhdGUuY29udGV4dC5jb2wgPSBzdHJlYW0uY29sdW1uKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH0sXG5cbiAgICBpbmRlbnQ6IGZ1bmN0aW9uKHN0YXRlLCB0ZXh0QWZ0ZXIpIHtcbiAgICAgIHZhciBmaXJzdENoYXIgPSB0ZXh0QWZ0ZXIgJiYgdGV4dEFmdGVyLmNoYXJBdCgwKTtcbiAgICAgIHZhciBjb250ZXh0ID0gc3RhdGUuY29udGV4dDtcbiAgICAgIGlmICgvW1xcXVxcfV0vLnRlc3QoZmlyc3RDaGFyKSlcbiAgICAgICAgd2hpbGUgKGNvbnRleHQgJiYgY29udGV4dC50eXBlID09IFwicGF0dGVyblwiKSBjb250ZXh0ID0gY29udGV4dC5wcmV2O1xuXG4gICAgICB2YXIgY2xvc2luZyA9IGNvbnRleHQgJiYgZmlyc3RDaGFyID09IGNvbnRleHQudHlwZTtcbiAgICAgIGlmICghY29udGV4dClcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBlbHNlIGlmIChjb250ZXh0LnR5cGUgPT0gXCJwYXR0ZXJuXCIpXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNvbDtcbiAgICAgIGVsc2UgaWYgKGNvbnRleHQuYWxpZ24pXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNvbCArIChjbG9zaW5nID8gMCA6IDEpO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gY29udGV4dC5pbmRlbnQgKyAoY2xvc2luZyA/IDAgOiBpbmRlbnRVbml0KTtcbiAgICB9LFxuXG4gICAgbGluZUNvbW1lbnQ6IFwiI1wiXG4gIH07XG59KTtcblxuQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwiYXBwbGljYXRpb24vc3BhcnFsLXF1ZXJ5XCIsIFwic3BhcnFsXCIpO1xuXG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=