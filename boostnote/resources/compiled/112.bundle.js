(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{"./node_modules/codemirror/mode/vhdl/vhdl.js":function(e,t,n){!function(e){"use strict";function t(e){for(var t={},n=e.split(","),r=0;r<n.length;++r){var i=n[r].toUpperCase(),o=n[r].charAt(0).toUpperCase()+n[r].slice(1);t[n[r]]=!0,t[i]=!0,t[o]=!0}return t}function n(e){return e.eatWhile(/[\w\$_]/),"meta"}e.defineMode("vhdl",(function(e,r){var i,o=e.indentUnit,a=r.atoms||t("null"),l=r.hooks||{"`":n,$:n},u=r.multiLineStrings,s=t("abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor"),c=t("architecture,entity,begin,case,port,else,elsif,end,for,function,if"),d=/[&|~><!\)\(*#%@+\/=?\:;}{,\.\^\-\[\]]/;function f(e,t){var n,r=e.next();if(l[r]){var o=l[r](e,t);if(!1!==o)return o}if('"'==r)return t.tokenize=(n=r,function(e,t){for(var r,i=!1,o=!1;null!=(r=e.next());){if(r==n&&!i){o=!0;break}i=!i&&"--"==r}return(o||!i&&!u)&&(t.tokenize=f),"string-2"}),t.tokenize(e,t);if("'"==r)return t.tokenize=function(e){return function(t,n){for(var r,i=!1,o=!1;null!=(r=t.next());){if(r==e&&!i){o=!0;break}i=!i&&"--"==r}return(o||!i&&!u)&&(n.tokenize=f),"string"}}(r),t.tokenize(e,t);if(/[\[\]{}\(\),;\:\.]/.test(r))return i=r,null;if(/[\d']/.test(r))return e.eatWhile(/[\w\.']/),"number";if("-"==r&&e.eat("-"))return e.skipToEnd(),"comment";if(d.test(r))return e.eatWhile(d),"operator";e.eatWhile(/[\w\$_]/);var p=e.current();return s.propertyIsEnumerable(p.toLowerCase())?(c.propertyIsEnumerable(p)&&(i="newstatement"),"keyword"):a.propertyIsEnumerable(p)?"atom":"variable"}function p(e,t,n,r,i){this.indented=e,this.column=t,this.type=n,this.align=r,this.prev=i}function m(e,t,n){return e.context=new p(e.indented,t,n,null,e.context)}function h(e){var t=e.context.type;return")"!=t&&"]"!=t&&"}"!=t||(e.indented=e.context.indented),e.context=e.context.prev}return{startState:function(e){return{tokenize:null,context:new p((e||0)-o,0,"top",!1),indented:0,startOfLine:!0}},token:function(e,t){var n=t.context;if(e.sol()&&(null==n.align&&(n.align=!1),t.indented=e.indentation(),t.startOfLine=!0),e.eatSpace())return null;i=null;var r=(t.tokenize||f)(e,t);if("comment"==r||"meta"==r)return r;if(null==n.align&&(n.align=!0),";"!=i&&":"!=i||"statement"!=n.type)if("{"==i)m(t,e.column(),"}");else if("["==i)m(t,e.column(),"]");else if("("==i)m(t,e.column(),")");else if("}"==i){for(;"statement"==n.type;)n=h(t);for("}"==n.type&&(n=h(t));"statement"==n.type;)n=h(t)}else i==n.type?h(t):("}"==n.type||"top"==n.type||"statement"==n.type&&"newstatement"==i)&&m(t,e.column(),"statement");else h(t);return t.startOfLine=!1,r},indent:function(e,t){if(e.tokenize!=f&&null!=e.tokenize)return 0;var n=t&&t.charAt(0),r=e.context,i=n==r.type;return"statement"==r.type?r.indented+("{"==n?0:o):r.align?r.column+(i?0:1):r.indented+(i?0:o)},electricChars:"{}"}})),e.defineMIME("text/x-vhdl","vhdl")}(n("./node_modules/codemirror/lib/codemirror.js"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL3ZoZGwvdmhkbC5qcyJdLCJuYW1lcyI6WyJDb2RlTWlycm9yIiwid29yZHMiLCJzdHIiLCJvYmoiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJhbGxDYXBzIiwidG9VcHBlckNhc2UiLCJmaXJzdENhcCIsImNoYXJBdCIsInNsaWNlIiwibWV0YUhvb2siLCJzdHJlYW0iLCJlYXRXaGlsZSIsImRlZmluZU1vZGUiLCJjb25maWciLCJwYXJzZXJDb25maWciLCJjdXJQdW5jIiwiaW5kZW50VW5pdCIsImF0b21zIiwiaG9va3MiLCJtdWx0aUxpbmVTdHJpbmdzIiwia2V5d29yZHMiLCJibG9ja0tleXdvcmRzIiwiaXNPcGVyYXRvckNoYXIiLCJ0b2tlbkJhc2UiLCJzdGF0ZSIsInF1b3RlIiwiY2giLCJuZXh0IiwicmVzdWx0IiwidG9rZW5pemUiLCJlc2NhcGVkIiwiZW5kIiwidG9rZW5TdHJpbmciLCJ0ZXN0IiwiZWF0Iiwic2tpcFRvRW5kIiwiY3VyIiwiY3VycmVudCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9Mb3dlckNhc2UiLCJDb250ZXh0IiwiaW5kZW50ZWQiLCJjb2x1bW4iLCJ0eXBlIiwiYWxpZ24iLCJwcmV2IiwidGhpcyIsInB1c2hDb250ZXh0IiwiY29sIiwiY29udGV4dCIsInBvcENvbnRleHQiLCJ0Iiwic3RhcnRTdGF0ZSIsImJhc2Vjb2x1bW4iLCJzdGFydE9mTGluZSIsInRva2VuIiwiY3R4Iiwic29sIiwiaW5kZW50YXRpb24iLCJlYXRTcGFjZSIsInN0eWxlIiwiaW5kZW50IiwidGV4dEFmdGVyIiwiZmlyc3RDaGFyIiwiY2xvc2luZyIsImVsZWN0cmljQ2hhcnMiLCJkZWZpbmVNSU1FIiwibW9kIl0sIm1hcHBpbmdzIjoiMEhBV0csU0FBU0EsR0FDWixhQUVBLFNBQVNDLEVBQU1DLEdBRWIsSUFEQSxJQUFJQyxFQUFNLEdBQUlGLEVBQVFDLEVBQUlFLE1B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Z0MsRUFBSWIsT0FBYWEsRUFBTU4sRUFBVzFCLElBQ25CLGFBQVpnQyxFQUFJYixNQUFxQmEsRUFBTU4sRUFBVzFCLFFBRTFDVCxHQUFXeUMsRUFBSWIsS0FBTU8sRUFBVzFCLElBQ3BCLEtBQVpnQyxFQUFJYixNQUEyQixPQUFaYSxFQUFJYixNQUE4QixhQUFaYSxFQUFJYixNQUFrQyxnQkFBWDVCLElBQzNFZ0MsRUFBWXZCLEVBQU9kLEVBQU9nQyxTQUFVLGtCQVg2QlEsRUFBVzFCLEdBYTlFLE9BREFBLEVBQU04QixhQUFjLEVBQ2JNLEdBR1RDLE9BQVEsU0FBU3JDLEVBQU9zQyxHQUN0QixHQUFJdEMsRUFBTUssVUFBWU4sR0FBK0IsTUFBbEJDLEVBQU1LLFNBQWtCLE9BQU8sRUFDbEUsSUFBSWtDLEVBQVlELEdBQWFBLEVBQVV2RCxPQUFPLEdBQUlpRCxFQUFNaEMsRUFBTXlCLFFBQVNlLEVBQVVELEdBQWFQLEVBQUliLEtBQ2xHLE1BQWdCLGFBQVphLEVBQUliLEtBQTRCYSxFQUFJZixVQUF5QixLQUFic0IsRUFBbUIsRUFBSS9DLEdBQ2xFd0MsRUFBSVosTUFBY1ksRUFBSWQsUUFBVXNCLEVBQVUsRUFBSSxHQUMzQ1IsRUFBSWYsVUFBWXVCLEVBQVUsRUFBSWhELElBRzVDaUQsY0FBZSxTQUluQnBFLEVBQVdxRSxXQUFXLGNBQWUsUUFwTGpDQyxDQUFJLEVBQVEiLCJmaWxlIjoiMTEyLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cHM6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbi8vIE9yaWdpbmFsbHkgd3JpdHRlbiBieSBBbGYgTmllbHNlbiwgcmUtd3JpdHRlbiBieSBNaWNoYWVsIFpob3VcbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIG1vZChyZXF1aXJlKFwiLi4vLi4vbGliL2NvZGVtaXJyb3JcIikpO1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICBkZWZpbmUoW1wiLi4vLi4vbGliL2NvZGVtaXJyb3JcIl0sIG1vZCk7XG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcik7XG59KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gd29yZHMoc3RyKSB7XG4gIHZhciBvYmogPSB7fSwgd29yZHMgPSBzdHIuc3BsaXQoXCIsXCIpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGFsbENhcHMgPSB3b3Jkc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgIHZhciBmaXJzdENhcCA9IHdvcmRzW2ldLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZHNbaV0uc2xpY2UoMSk7XG4gICAgb2JqW3dvcmRzW2ldXSA9IHRydWU7XG4gICAgb2JqW2FsbENhcHNdID0gdHJ1ZTtcbiAgICBvYmpbZmlyc3RDYXBdID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBtZXRhSG9vayhzdHJlYW0pIHtcbiAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkX10vKTtcbiAgcmV0dXJuIFwibWV0YVwiO1xufVxuXG5Db2RlTWlycm9yLmRlZmluZU1vZGUoXCJ2aGRsXCIsIGZ1bmN0aW9uKGNvbmZpZywgcGFyc2VyQ29uZmlnKSB7XG4gIHZhciBpbmRlbnRVbml0ID0gY29uZmlnLmluZGVudFVuaXQsXG4gICAgICBhdG9tcyA9IHBhcnNlckNvbmZpZy5hdG9tcyB8fCB3b3JkcyhcIm51bGxcIiksXG4gICAgICBob29rcyA9IHBhcnNlckNvbmZpZy5ob29rcyB8fCB7XCJgXCI6IG1ldGFIb29rLCBcIiRcIjogbWV0YUhvb2t9LFxuICAgICAgbXVsdGlMaW5lU3RyaW5ncyA9IHBhcnNlckNvbmZpZy5tdWx0aUxpbmVTdHJpbmdzO1xuXG4gIHZhciBrZXl3b3JkcyA9IHdvcmRzKFwiYWJzLGFjY2VzcyxhZnRlcixhbGlhcyxhbGwsYW5kLGFyY2hpdGVjdHVyZSxhcnJheSxhc3NlcnQsYXR0cmlidXRlLGJlZ2luLGJsb2NrLFwiICtcbiAgICAgIFwiYm9keSxidWZmZXIsYnVzLGNhc2UsY29tcG9uZW50LGNvbmZpZ3VyYXRpb24sY29uc3RhbnQsZGlzY29ubmVjdCxkb3dudG8sZWxzZSxlbHNpZixlbmQsZW5kIGJsb2NrLGVuZCBjYXNlLFwiICtcbiAgICAgIFwiZW5kIGNvbXBvbmVudCxlbmQgZm9yLGVuZCBnZW5lcmF0ZSxlbmQgaWYsZW5kIGxvb3AsZW5kIHByb2Nlc3MsZW5kIHJlY29yZCxlbmQgdW5pdHMsZW50aXR5LGV4aXQsZmlsZSxmb3IsXCIgK1xuICAgICAgXCJmdW5jdGlvbixnZW5lcmF0ZSxnZW5lcmljLGdlbmVyaWMgbWFwLGdyb3VwLGd1YXJkZWQsaWYsaW1wdXJlLGluLGluZXJ0aWFsLGlub3V0LGlzLGxhYmVsLGxpYnJhcnksbGlua2FnZSxcIiArXG4gICAgICBcImxpdGVyYWwsbG9vcCxtYXAsbW9kLG5hbmQsbmV3LG5leHQsbm9yLG51bGwsb2Ysb24sb3BlbixvcixvdGhlcnMsb3V0LHBhY2thZ2UscGFja2FnZSBib2R5LHBvcnQscG9ydCBtYXAsXCIgK1xuICAgICAgXCJwb3N0cG9uZWQscHJvY2VkdXJlLHByb2Nlc3MscHVyZSxyYW5nZSxyZWNvcmQscmVnaXN0ZXIscmVqZWN0LHJlbSxyZXBvcnQscmV0dXJuLHJvbCxyb3Isc2VsZWN0LHNldmVyaXR5LHNpZ25hbCxcIiArXG4gICAgICBcInNsYSxzbGwsc3JhLHNybCxzdWJ0eXBlLHRoZW4sdG8sdHJhbnNwb3J0LHR5cGUsdW5hZmZlY3RlZCx1bml0cyx1bnRpbCx1c2UsdmFyaWFibGUsd2FpdCx3aGVuLHdoaWxlLHdpdGgseG5vcix4b3JcIik7XG5cbiAgdmFyIGJsb2NrS2V5d29yZHMgPSB3b3JkcyhcImFyY2hpdGVjdHVyZSxlbnRpdHksYmVnaW4sY2FzZSxwb3J0LGVsc2UsZWxzaWYsZW5kLGZvcixmdW5jdGlvbixpZlwiKTtcblxuICB2YXIgaXNPcGVyYXRvckNoYXIgPSAvWyZ8fj48IVxcKVxcKCojJUArXFwvPT9cXDo7fXssXFwuXFxeXFwtXFxbXFxdXS87XG4gIHZhciBjdXJQdW5jO1xuXG4gIGZ1bmN0aW9uIHRva2VuQmFzZShzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcbiAgICBpZiAoaG9va3NbY2hdKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaG9va3NbY2hdKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGlmIChjaCA9PSAnXCInKSB7XG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuU3RyaW5nMihjaCk7XG4gICAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChjaCA9PSBcIidcIikge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlblN0cmluZyhjaCk7XG4gICAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuICAgIGlmICgvW1xcW1xcXXt9XFwoXFwpLDtcXDpcXC5dLy50ZXN0KGNoKSkge1xuICAgICAgY3VyUHVuYyA9IGNoO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICgvW1xcZCddLy50ZXN0KGNoKSkge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwuJ10vKTtcbiAgICAgIHJldHVybiBcIm51bWJlclwiO1xuICAgIH1cbiAgICBpZiAoY2ggPT0gXCItXCIpIHtcbiAgICAgIGlmIChzdHJlYW0uZWF0KFwiLVwiKSkge1xuICAgICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzT3BlcmF0b3JDaGFyLnRlc3QoY2gpKSB7XG4gICAgICBzdHJlYW0uZWF0V2hpbGUoaXNPcGVyYXRvckNoYXIpO1xuICAgICAgcmV0dXJuIFwib3BlcmF0b3JcIjtcbiAgICB9XG4gICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkX10vKTtcbiAgICB2YXIgY3VyID0gc3RyZWFtLmN1cnJlbnQoKTtcbiAgICBpZiAoa2V5d29yZHMucHJvcGVydHlJc0VudW1lcmFibGUoY3VyLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICBpZiAoYmxvY2tLZXl3b3Jkcy5wcm9wZXJ0eUlzRW51bWVyYWJsZShjdXIpKSBjdXJQdW5jID0gXCJuZXdzdGF0ZW1lbnRcIjtcbiAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICB9XG4gICAgaWYgKGF0b21zLnByb3BlcnR5SXNFbnVtZXJhYmxlKGN1cikpIHJldHVybiBcImF0b21cIjtcbiAgICByZXR1cm4gXCJ2YXJpYWJsZVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5TdHJpbmcocXVvdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgdmFyIGVzY2FwZWQgPSBmYWxzZSwgbmV4dCwgZW5kID0gZmFsc2U7XG4gICAgICB3aGlsZSAoKG5leHQgPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChuZXh0ID09IHF1b3RlICYmICFlc2NhcGVkKSB7ZW5kID0gdHJ1ZTsgYnJlYWs7fVxuICAgICAgICBlc2NhcGVkID0gIWVzY2FwZWQgJiYgbmV4dCA9PSBcIi0tXCI7XG4gICAgICB9XG4gICAgICBpZiAoZW5kIHx8ICEoZXNjYXBlZCB8fCBtdWx0aUxpbmVTdHJpbmdzKSlcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHRva2VuU3RyaW5nMihxdW90ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgZXNjYXBlZCA9IGZhbHNlLCBuZXh0LCBlbmQgPSBmYWxzZTtcbiAgICAgIHdoaWxlICgobmV4dCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpIHtcbiAgICAgICAgaWYgKG5leHQgPT0gcXVvdGUgJiYgIWVzY2FwZWQpIHtlbmQgPSB0cnVlOyBicmVhazt9XG4gICAgICAgIGVzY2FwZWQgPSAhZXNjYXBlZCAmJiBuZXh0ID09IFwiLS1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgfHwgIShlc2NhcGVkIHx8IG11bHRpTGluZVN0cmluZ3MpKVxuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICAgIHJldHVybiBcInN0cmluZy0yXCI7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQoaW5kZW50ZWQsIGNvbHVtbiwgdHlwZSwgYWxpZ24sIHByZXYpIHtcbiAgICB0aGlzLmluZGVudGVkID0gaW5kZW50ZWQ7XG4gICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmFsaWduID0gYWxpZ247XG4gICAgdGhpcy5wcmV2ID0gcHJldjtcbiAgfVxuICBmdW5jdGlvbiBwdXNoQ29udGV4dChzdGF0ZSwgY29sLCB0eXBlKSB7XG4gICAgcmV0dXJuIHN0YXRlLmNvbnRleHQgPSBuZXcgQ29udGV4dChzdGF0ZS5pbmRlbnRlZCwgY29sLCB0eXBlLCBudWxsLCBzdGF0ZS5jb250ZXh0KTtcbiAgfVxuICBmdW5jdGlvbiBwb3BDb250ZXh0KHN0YXRlKSB7XG4gICAgdmFyIHQgPSBzdGF0ZS5jb250ZXh0LnR5cGU7XG4gICAgaWYgKHQgPT0gXCIpXCIgfHwgdCA9PSBcIl1cIiB8fCB0ID09IFwifVwiKVxuICAgICAgc3RhdGUuaW5kZW50ZWQgPSBzdGF0ZS5jb250ZXh0LmluZGVudGVkO1xuICAgIHJldHVybiBzdGF0ZS5jb250ZXh0ID0gc3RhdGUuY29udGV4dC5wcmV2O1xuICB9XG5cbiAgLy8gSW50ZXJmYWNlXG4gIHJldHVybiB7XG4gICAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oYmFzZWNvbHVtbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9rZW5pemU6IG51bGwsXG4gICAgICAgIGNvbnRleHQ6IG5ldyBDb250ZXh0KChiYXNlY29sdW1uIHx8IDApIC0gaW5kZW50VW5pdCwgMCwgXCJ0b3BcIiwgZmFsc2UpLFxuICAgICAgICBpbmRlbnRlZDogMCxcbiAgICAgICAgc3RhcnRPZkxpbmU6IHRydWVcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgY3R4ID0gc3RhdGUuY29udGV4dDtcbiAgICAgIGlmIChzdHJlYW0uc29sKCkpIHtcbiAgICAgICAgaWYgKGN0eC5hbGlnbiA9PSBudWxsKSBjdHguYWxpZ24gPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuaW5kZW50ZWQgPSBzdHJlYW0uaW5kZW50YXRpb24oKTtcbiAgICAgICAgc3RhdGUuc3RhcnRPZkxpbmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHN0cmVhbS5lYXRTcGFjZSgpKSByZXR1cm4gbnVsbDtcbiAgICAgIGN1clB1bmMgPSBudWxsO1xuICAgICAgdmFyIHN0eWxlID0gKHN0YXRlLnRva2VuaXplIHx8IHRva2VuQmFzZSkoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICBpZiAoc3R5bGUgPT0gXCJjb21tZW50XCIgfHwgc3R5bGUgPT0gXCJtZXRhXCIpIHJldHVybiBzdHlsZTtcbiAgICAgIGlmIChjdHguYWxpZ24gPT0gbnVsbCkgY3R4LmFsaWduID0gdHJ1ZTtcblxuICAgICAgaWYgKChjdXJQdW5jID09IFwiO1wiIHx8IGN1clB1bmMgPT0gXCI6XCIpICYmIGN0eC50eXBlID09IFwic3RhdGVtZW50XCIpIHBvcENvbnRleHQoc3RhdGUpO1xuICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBcIntcIikgcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbS5jb2x1bW4oKSwgXCJ9XCIpO1xuICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBcIltcIikgcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbS5jb2x1bW4oKSwgXCJdXCIpO1xuICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBcIihcIikgcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbS5jb2x1bW4oKSwgXCIpXCIpO1xuICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBcIn1cIikge1xuICAgICAgICB3aGlsZSAoY3R4LnR5cGUgPT0gXCJzdGF0ZW1lbnRcIikgY3R4ID0gcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICAgIGlmIChjdHgudHlwZSA9PSBcIn1cIikgY3R4ID0gcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICAgIHdoaWxlIChjdHgudHlwZSA9PSBcInN0YXRlbWVudFwiKSBjdHggPSBwb3BDb250ZXh0KHN0YXRlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGN1clB1bmMgPT0gY3R4LnR5cGUpIHBvcENvbnRleHQoc3RhdGUpO1xuICAgICAgZWxzZSBpZiAoY3R4LnR5cGUgPT0gXCJ9XCIgfHwgY3R4LnR5cGUgPT0gXCJ0b3BcIiB8fCAoY3R4LnR5cGUgPT0gXCJzdGF0ZW1lbnRcIiAmJiBjdXJQdW5jID09IFwibmV3c3RhdGVtZW50XCIpKVxuICAgICAgICBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLmNvbHVtbigpLCBcInN0YXRlbWVudFwiKTtcbiAgICAgIHN0YXRlLnN0YXJ0T2ZMaW5lID0gZmFsc2U7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcblxuICAgIGluZGVudDogZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlcikge1xuICAgICAgaWYgKHN0YXRlLnRva2VuaXplICE9IHRva2VuQmFzZSAmJiBzdGF0ZS50b2tlbml6ZSAhPSBudWxsKSByZXR1cm4gMDtcbiAgICAgIHZhciBmaXJzdENoYXIgPSB0ZXh0QWZ0ZXIgJiYgdGV4dEFmdGVyLmNoYXJBdCgwKSwgY3R4ID0gc3RhdGUuY29udGV4dCwgY2xvc2luZyA9IGZpcnN0Q2hhciA9PSBjdHgudHlwZTtcbiAgICAgIGlmIChjdHgudHlwZSA9PSBcInN0YXRlbWVudFwiKSByZXR1cm4gY3R4LmluZGVudGVkICsgKGZpcnN0Q2hhciA9PSBcIntcIiA/IDAgOiBpbmRlbnRVbml0KTtcbiAgICAgIGVsc2UgaWYgKGN0eC5hbGlnbikgcmV0dXJuIGN0eC5jb2x1bW4gKyAoY2xvc2luZyA/IDAgOiAxKTtcbiAgICAgIGVsc2UgcmV0dXJuIGN0eC5pbmRlbnRlZCArIChjbG9zaW5nID8gMCA6IGluZGVudFVuaXQpO1xuICAgIH0sXG5cbiAgICBlbGVjdHJpY0NoYXJzOiBcInt9XCJcbiAgfTtcbn0pO1xuXG5Db2RlTWlycm9yLmRlZmluZU1JTUUoXCJ0ZXh0L3gtdmhkbFwiLCBcInZoZGxcIik7XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==