(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{"./node_modules/codemirror/mode/mumps/mumps.js":function(e,t,n){!function(e){"use strict";e.defineMode("mumps",(function(){function e(e){return new RegExp("^(("+e.join(")|(")+"))\\b","i")}var t=new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]"),n=new RegExp("^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))"),o=new RegExp("^[\\.,:]"),r=new RegExp("[()]"),$=new RegExp("^[%A-Za-z][A-Za-z0-9]*"),a=e(["\\$ascii","\\$char","\\$data","\\$ecode","\\$estack","\\$etrap","\\$extract","\\$find","\\$fnumber","\\$get","\\$horolog","\\$io","\\$increment","\\$job","\\$justify","\\$length","\\$name","\\$next","\\$order","\\$piece","\\$qlength","\\$qsubscript","\\$query","\\$quit","\\$random","\\$reverse","\\$select","\\$stack","\\$test","\\$text","\\$translate","\\$view","\\$x","\\$y","\\$a","\\$c","\\$d","\\$e","\\$ec","\\$es","\\$et","\\$f","\\$fn","\\$g","\\$h","\\$i","\\$j","\\$l","\\$n","\\$na","\\$o","\\$p","\\$q","\\$ql","\\$qs","\\$r","\\$re","\\$s","\\$st","\\$t","\\$tr","\\$v","\\$z"]),m=e(["break","close","do","else","for","goto","halt","hang","if","job","kill","lock","merge","new","open","quit","read","set","tcommit","trollback","tstart","use","view","write","xecute","b","c","d","e","f","g","h","i","j","k","l","m","n","o","q","r","s","tc","tro","ts","u","v","w","x"]);return{startState:function(){return{label:!1,commandMode:0}},token:function(e,c){var i=function(e,c){e.sol()&&(c.label=!0,c.commandMode=0);var i=e.peek();return" "==i||"\t"==i?(c.label=!1,0==c.commandMode?c.commandMode=1:(c.commandMode<0||2==c.commandMode)&&(c.commandMode=0)):"."!=i&&c.commandMode>0&&(c.commandMode=":"==i?-1:2),"("!==i&&"\t"!==i||(c.label=!1),";"===i?(e.skipToEnd(),"comment"):e.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/)?"number":'"'==i?e.skipTo('"')?(e.next(),"string"):(e.skipToEnd(),"error"):e.match(n)||e.match(t)?"operator":e.match(o)?null:r.test(i)?(e.next(),"bracket"):c.commandMode>0&&e.match(m)?"variable-2":e.match(a)?"builtin":e.match($)?"variable":"$"===i||"^"===i?(e.next(),"builtin"):"@"===i?(e.next(),"string-2"):/[\w%]/.test(i)?(e.eatWhile(/[\w%]/),"variable"):(e.next(),"error")}(e,c);return c.label?"tag":i}}})),e.defineMIME("text/x-mumps","mumps")}(n("./node_modules/codemirror/lib/codemirror.js"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,