(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{"./node_modules/codemirror/mode/jsx/jsx.js":function(t,e,n){!function(t){"use strict";function e(t,e,n,r){this.state=t,this.mode=e,this.depth=n,this.prev=r}function n(r){return new e(t.copyState(r.mode,r.state),r.mode,r.depth,r.prev&&n(r.prev))}t.defineMode("jsx",(function(r,o){var a=t.getMode(r,{name:"xml",allowMissing:!0,multilineTagIndentPastTag:!1,allowMissingTagName:!0}),i=t.getMode(r,o&&o.base||"javascript");function s(t){var e=t.tagName;t.tagName=null;var n=a.indent(t,"","");return t.tagName=e,n}function c(n,o){return o.context.mode==a?function(n,o,d){if(2==d.depth)return n.match(/^.*?\*\//)?d.depth=1:n.skipToEnd(),"comment";if("{"==n.peek()){a.skipAttribute(d.state);var p=s(d.state),u=d.state.context;if(u&&n.match(/^[^>]*>\s*$/,!1)){for(;u.prev&&!u.startOfLine;)u=u.prev;u.startOfLine?p-=r.indentUnit:d.prev.state.lexical&&(p=d.prev.state.lexical.indented)}else 1==d.depth&&(p+=r.indentUnit);return o.context=new e(t.startState(i,p),i,0,o.context),null}if(1==d.depth){if("<"==n.peek())return a.skipAttribute(d.state),o.context=new e(t.startState(a,s(d.state)),a,0,o.context),null;if(n.match("//"))return n.skipToEnd(),"comment";if(n.match("/*"))return d.depth=2,c(n,o)}var x,m=a.token(n,d.state),l=n.current();return/\btag\b/.test(m)?/>$/.test(l)?d.state.context?d.depth=0:o.context=o.context.prev:/^</.test(l)&&(d.depth=1):!m&&(x=l.indexOf("{"))>-1&&n.backUp(l.length-x),m}(n,o,o.context):function(n,r,o){if("<"==n.peek()&&i.expressionAllowed(n,o.state))return i.skipExpression(o.state),r.context=new e(t.startState(a,i.indent(o.state,"","")),a,0,r.context),null;var s=i.token(n,o.state);if(!s&&null!=o.depth){var c=n.current();"{"==c?o.depth++:"}"==c&&0==--o.depth&&(r.context=r.context.prev)}return s}(n,o,o.context)}return{startState:function(){return{context:new e(t.startState(i),i)}},copyState:function(t){return{context:n(t.context)}},token:c,indent:function(t,e,n){return t.context.mode.indent(t.context.state,e,n)},innerMode:function(t){return t.context}}}),"xml","javascript"),t.defineMIME("text/jsx","jsx"),t.defineMIME("text/typescript-jsx",{name:"jsx",base:{name:"javascript",typescript:!0}})}(n("./node_modules/codemirror/lib/codemirror.js"),n("./node_modules/codemirror/mode/xml/xml.js"),n("./node_modules/codemirror/mode/javascript/javascript.js"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,