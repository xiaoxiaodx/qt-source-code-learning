(window.webpackJsonp=window.webpackJsonp||[]).push([[21,116],{"./node_modules/codemirror/mode/yaml-frontmatter/yaml-frontmatter.js":function(e,t,n){var r,i;r=n("./node_modules/codemirror/lib/codemirror.js"),n("./node_modules/codemirror/mode/yaml/yaml.js"),i=2,r.defineMode("yaml-frontmatter",(function(e,t){var n=r.getMode(e,"yaml"),a=r.getMode(e,t&&t.base||"gfm");function o(e){return e.state==i?a:n}return{startState:function(){return{state:0,inner:r.startState(n)}},copyState:function(e){return{state:e.state,inner:r.copyState(o(e),e.inner)}},token:function(e,t){if(0==t.state)return e.match(/---/,!1)?(t.state=1,n.token(e,t.inner)):(t.state=i,t.inner=r.startState(a),a.token(e,t.inner));if(1==t.state){var o=e.sol()&&e.match(/---/,!1),s=n.token(e,t.inner);return o&&(t.state=i,t.inner=r.startState(a)),s}return a.token(e,t.inner)},innerMode:function(e){return{mode:o(e),state:e.inner}},blankLine:function(e){var t=o(e);if(t.blankLine)return t.blankLine(e.inner)}}}))},"./node_modules/codemirror/mode/yaml/yaml.js":function(e,t,n){!function(e){"use strict";e.defineMode("yaml",(function(){var e=new RegExp("\\b(("+["true","false","on","off","yes","no"].join(")|(")+"))$","i");return{token:function(t,n){var r=t.peek(),i=n.escaped;if(n.escaped=!1,"#"==r&&(0==t.pos||/\s/.test(t.string.charAt(t.pos-1))))return t.skipToEnd(),"comment";if(t.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))return"string";if(n.literal&&t.indentation()>n.keyCol)return t.skipToEnd(),"string";if(n.literal&&(n.literal=!1),t.sol()){if(n.keyCol=0,n.pair=!1,n.pairStart=!1,t.match(/---/))return"def";if(t.match(/\.\.\./))return"def";if(t.match(/\s*-\s+/))return"meta"}if(t.match(/^(\{|\}|\[|\])/))return"{"==r?n.inlinePairs++:"}"==r?n.inlinePairs--:"["==r?n.inlineList++:n.inlineList--,"meta";if(n.inlineList>0&&!i&&","==r)return t.next(),"meta";if(n.inlinePairs>0&&!i&&","==r)return n.keyCol=0,n.pair=!1,n.pairStart=!1,t.next(),"meta";if(n.pairStart){if(t.match(/^\s*(\||\>)\s*/))return n.literal=!0,"meta";if(t.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i))return"variable-2";if(0==n.inlinePairs&&t.match(/^\s*-?[0-9\.\,]+\s?$/))return"number";if(n.inlinePairs>0&&t.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/))return"number";if(t.match(e))return"keyword"}return!n.pair&&t.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)?(n.pair=!0,n.keyCol=t.indentation(),"atom"):n.pair&&t.match(/^:\s*/)?(n.pairStart=!0,"meta"):(n.pairStart=!1,n.escaped="\\"==r,t.next(),null)},startState:function(){return{pair:!1,pairStart:!1,keyCol:0,inlinePairs:0,inlineList:0,literal:!1,escaped:!1}},lineComment:"#",fold:"indent"}})),e.defineMIME("text/x-yaml","yaml"),e.defineMIME("text/yaml","yaml")}(n("./node_modules/codemirror/lib/codemirror.js"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,