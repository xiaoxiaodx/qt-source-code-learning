(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{"./node_modules/codemirror/mode/dart/dart.js":function(e,t,n){!function(e){"use strict";var t="this super static final const abstract class extends external factory implements mixin get native set typedef with enum throw rethrow assert break case continue default in return new deferred async await covariant try catch finally do else for if switch while import library export part of show hide is as".split(" "),n="try catch finally do else for if switch while".split(" "),r="true false null".split(" "),i="void bool num int double dynamic var String".split(" ");function o(e){for(var t={},n=0;n<e.length;++n)t[e[n]]=!0;return t}function a(e){(e.interpolationStack||(e.interpolationStack=[])).push(e.tokenize)}function c(e){return(e.interpolationStack||(e.interpolationStack=[])).pop()}function u(e,t,n,r){var i=!1;if(t.eat(e)){if(!t.eat(e))return"string";i=!0}function o(t,n){for(var o=!1;!t.eol();){if(!r&&!o&&"$"==t.peek())return a(n),n.tokenize=l,"string";var c=t.next();if(c==e&&!o&&(!i||t.match(e+e))){n.tokenize=null;break}o=!r&&!o&&"\\"==c}return"string"}return n.tokenize=o,o(t,n)}function l(e,t){return e.eat("$"),e.eat("{")?t.tokenize=null:t.tokenize=s,null}function s(e,t){return e.eatWhile(/[\w_]/),t.tokenize=c(t),"variable"}e.defineMIME("application/dart",{name:"clike",keywords:o(t),blockKeywords:o(n),builtin:o(i),atoms:o(r),hooks:{"@":function(e){return e.eatWhile(/[\w\$_\.]/),"meta"},"'":function(e,t){return u("'",e,t,!1)},'"':function(e,t){return u('"',e,t,!1)},r:function(e,t){var n=e.peek();return("'"==n||'"'==n)&&u(e.next(),e,t,!0)},"}":function(e,t){return function(e){return e.interpolationStack?e.interpolationStack.length:0}(t)>0&&(t.tokenize=c(t),null)},"/":function(e,t){return!!e.eat("*")&&(t.tokenize=function e(t){return function(n,r){for(var i;i=n.next();){if("*"==i&&n.eat("/")){if(1==t){r.tokenize=null;break}return r.tokenize=e(t-1),r.tokenize(n,r)}if("/"==i&&n.eat("*"))return r.tokenize=e(t+1),r.tokenize(n,r)}return"comment"}}(1),t.tokenize(e,t))},token:function(e,t,n){if("variable"==n&&RegExp("^[_$]*[A-Z][a-zA-Z0-9_$]*$","g").test(e.current()))return"variable-2"}}}),e.registerHelper("hintWords","application/dart",t.concat(r).concat(i)),e.defineMode("dart",(function(t){return e.getMode(t,"application/dart")}),"clike")}(n("./node_modules/codemirror/lib/codemirror.js"),n("./node_modules/codemirror/mode/clike/clike.js"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,